package alexgr.taskmanagement.entity;

import alexgr.taskmanagement.dto.role.Role;
import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import lombok.Data;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;


import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
/**
 * Represents a user entity in the application.
 * <p>
 * This entity maps to the `users` table in the database and contains information about the user, their tasks,
 * and comments. It also includes auditing fields for tracking creation and modification dates.
 * </p>
 */
@Data
@Entity
@EntityListeners(AuditingEntityListener.class)
@Table(name = "users")
public class UserEntity {

    /**
     * The unique identifier for the user.
     * <p>
     * This value is automatically generated by the database.
     * </p>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    /**
     * The user's first name.
     */
    @Column(name = "first_name")
    private String firstName;

    /**
     * The user's last name.
     */
    @Column(name = "last_name")
    private String lastName;

    /**
     * The user's email address.
     * <p>
     * This field must be unique and is validated to ensure it follows the email format.
     * </p>
     */
    @Email
    @Column(name = "email", unique = true, nullable = false)
    private String email;

    /**
     * The user's password.
     * <p>
     * This field is required and cannot be null.
     * </p>
     */
    @Column(name = "password", nullable = false)
    private String password;

    /**
     * The user's role in the application (e.g., USER or ADMIN).
     * <p>
     * This field is stored as a string in the database and is required.
     * </p>
     */
    @Enumerated(EnumType.STRING)
    @Column(name = "role", nullable = false)
    private Role role;

    /**
     * The list of tasks assigned to the user.
     * <p>
     * This establishes a many-to-many relationship between users and tasks.
     * </p>
     */
    @ManyToMany
    @JoinTable(
            name = "user_task",
            joinColumns = @JoinColumn(name = "user_id"),
            inverseJoinColumns = @JoinColumn(name = "task_id")
    )
    private List<TaskEntity> task;

    /**
     * The list of comments made by the user.
     * <p>
     * This establishes a one-to-many relationship between users and their comments.
     * </p>
     */
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<CommentEntity> commentEntityList = new ArrayList<>();

    /**
     * The date and time when the user was created.
     * <p>
     * This field is automatically populated and cannot be updated.
     * </p>
     */
    @CreatedDate
    @Column(name = "created_date", updatable = false, nullable = false)
    private LocalDateTime createdDate;

    /**
     * The date and time when the user was last updated.
     * <p>
     * This field is automatically populated whenever the entity is updated.
     * </p>
     */
    @LastModifiedDate
    @Column(name = "updated_date", nullable = false)
    private LocalDateTime updatedDate;

    /**
     * The version of the entity, used for optimistic locking.
     * <p>
     * This ensures that concurrent updates to the same entity do not overwrite changes.
     * </p>
     */
    @Version
    @Column(name = "version", nullable = false)
    private int version;

}
